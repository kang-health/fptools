from collections import Iterable, Hashable, Mapping
from typing import Mapping as MappingT, TypeVar, Generator, Tuple
from functools import reduce
from .callable import curry
from .collection import getitem


def extract(*keys, **aliases):
    def extractor(_dict):
        return {
            **{key: getitem(value, _dict) for key, value in aliases.items()},
            **pick(keys, _dict)
        }
    return extractor


@curry
def pick(keys, _dict):
    '''
    Creates an dictionary composed of the picked dictionary properties.
    '''
    return {key: _dict.get(key) for key in keys}


@curry
def omit(keys, _dict):
    return {key: value for key, value in _dict.items() if key not in keys}


@curry
def map_values(modifier, _dict):
    '''
    Creates a dictionary with the same keys as _dict and values generated by applying modifier(val) for each value.
    '''
    return {key: modifier(value) for key, value in _dict.items()}


@curry
def map_keys(modifier, _dict):
    '''
    Creates a dictionary with the same values as _dict and keys generated by applying modifier(key) for each key.
    '''
    return {modifier(key): value for key, value in _dict.items()}


@curry
def apply_spec(spec, _dict):
    return {**_dict,
            **{key: func(_dict[key])
               for key, func in spec.items()}}


def is_dict(value):
    '''
    Matches if value is a dictionary
    '''
    return isinstance(value, dict)


@curry
def map_keys_by_layer(modifiers, _dict):
    '''
    Creates a dictionary with the same values as _dict and keys generated by applying modifiers[level](key) for each level
    '''
    modifier = modifiers[0]
    modifiers_left = modifiers[1:]
    if modifiers_left:
        return {modifier(key): map_keys_by_layer(modifiers_left, value) if is_dict(value) else value for key, value in _dict.items()}
    else:
        return map_keys(modifier, _dict)


K = TypeVar('K')
V = TypeVar('V')


# TODO return ItemsView
@curry
def items(mapping: MappingT[K, V]) -> Generator[Tuple[K, V], None, None]:
    '''
    Like dict.items() but for any Mapping
    '''
    for key in mapping:
        yield (key, mapping[key])
