(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1:function(e){e.exports={type:"module",name:"fptools",doc:null,is_pkg:!0,members:[{type:"module",name:"fptools.callable",doc:null,is_pkg:!1,members:[{type:"function",name:"constant",doc:"Creates a function that returns value.",signature:"(value: ~Value) -> Callable[..., ~Value]"},{type:"function",name:"curry",doc:"Creates a function that accepts arguments of func and either invokes func returning its result,\nif at least arity number of arguments have been provided, or returns a function that accepts\nthe remaining func arguments, and so on.",signature:"(_callable: Callable[..., ~R]) -> Union[~R, Callable[..., Any]]"},{type:"class",name:"currymethod",doc:"Like curry but if the method was executed as a static method it will accept self as the last\nargument.",members:[{type:"object",name:"__dict__",doc:null},{type:"object",name:"__doc__",doc:null},{type:"object",name:"__get__",doc:null},{type:"object",name:"__init__",doc:null},{type:"object",name:"__init_subclass__",doc:null},{type:"object",name:"__module__",doc:null},{type:"object",name:"__subclasshook__",doc:null},{type:"object",name:"__weakref__",doc:null}]},{type:"function",name:"deprecated",doc:"Warn when using wrapped func",signature:"(func: ~T) -> ~T"},{type:"function",name:"flow",doc:"Creates a function that returns the result of invoking the given functions where each\nsuccessive invocation is supplied the return value of the previous.",signature:"(funcs: Iterable[Callable], value)"},{type:"function",name:"fullname",doc:"Get full name of a function: the module it is declared in and it's name",signature:"(func: Callable) -> str"},{type:"function",name:"graceful",doc:"Creates a functions that returns the result of invoking the given function or None if\nit raised an exception.",signature:"(func: ~T) -> ~T"},{type:"function",name:"identity",doc:"This function returns the first argument it receives.",signature:"(arg: ~T) -> ~T"},{type:"function",name:"noop",doc:"This method returns None",signature:"(*args, **kwargs) -> None"},{type:"function",name:"rename",doc:"Set a new name for a function",signature:"(new_name: str) -> Callable[[~T], ~T]"}],file:"/Users/iddan/fptools/fptools/callable.py"},{type:"module",name:"fptools.collection",doc:null,is_pkg:!1,members:[{type:"function",name:"branches",doc:"Iterates each path and value pair of the collection and it's descendent collections",signature:"(collection: Union[Mapping[Union[Hashable, int], Union[ForwardRef('Collection'), ~V]], Iterable[Union[ForwardRef('Collection'), ~V]]]) -> Generator[Tuple[Sequence[Union[Hashable, int]], Union[Mapping[Union[Hashable, int], Union[ForwardRef('Collection'), ~V]], Iterable[Union[ForwardRef('Collection'), ~V]], ~V]], NoneType, NoneType]"},{type:"function",name:"delitem",doc:null,signature:"(path: Union[Hashable, int, Sequence[Union[Hashable, int]]], collection: Union[MutableMapping[~K, Union[ForwardRef('MutableCollection'), ~V]], MutableSequence[Union[ForwardRef('MutableCollection'), ~V]]]) -> Union[MutableMapping[~K, Union[ForwardRef('MutableCollection'), ~V]], MutableSequence[Union[ForwardRef('MutableCollection'), ~V]]]"},{type:"function",name:"getitem",doc:"Gets the value at path of collection",signature:"(path: Union[Hashable, int, Sequence[Union[Hashable, int]]], collection: Union[Mapping[Union[Hashable, int], Union[ForwardRef('Collection'), ~V]], Iterable[Union[ForwardRef('Collection'), ~V]]]) -> ~V"},{type:"function",name:"hasitem",doc:null,signature:"(path: Union[Hashable, int, Sequence[Union[Hashable, int]]], collection: Union[Mapping[Union[Hashable, int], Union[ForwardRef('Collection'), ~V]], Iterable[Union[ForwardRef('Collection'), ~V]]]) -> bool"},{type:"function",name:"leaves",doc:"Like branches() but only yields non collection values",signature:"(collection: Union[Mapping[Union[Hashable, int], Union[ForwardRef('Collection'), ~V]], Iterable[Union[ForwardRef('Collection'), ~V]]]) -> Generator[Tuple[Sequence[Union[Hashable, int]], ~V], NoneType, NoneType]"},{type:"function",name:"pick",doc:"Creates a collection composed of the picked paths.",signature:"(paths: Iterable[Union[Hashable, int, Sequence[Union[Hashable, int]]]], collection: Union[Mapping[Union[Hashable, int], Union[ForwardRef('Collection'), ~V]], Iterable[Union[ForwardRef('Collection'), ~V]]]) -> Union[Mapping[Union[Hashable, int], Union[ForwardRef('Collection'), ~V]], Iterable[Union[ForwardRef('Collection'), ~V]]]"},{type:"function",name:"setitem",doc:"Sets the value at path of collection. If a portion of path doesn't exist, it's created.",signature:"(path: Union[Hashable, int, Sequence[Union[Hashable, int]]], value: ~V, collection: Union[MutableMapping[~K, Union[ForwardRef('MutableCollection'), ~V]], MutableSequence[Union[ForwardRef('MutableCollection'), ~V]]]) -> Union[MutableMapping[~K, Union[ForwardRef('MutableCollection'), ~V]], MutableSequence[Union[ForwardRef('MutableCollection'), ~V]]]"},{type:"function",name:"to_path",doc:"Converts value to a property path tuple.",signature:"(path: Union[Hashable, int, Sequence[Union[Hashable, int]]]) -> Sequence[Union[Hashable, int]]"},{type:"function",name:"update",doc:"This method is like set except that accepts updater to produce the value to set.",signature:"(path: Union[Hashable, int, Sequence[Union[Hashable, int]]], modifier: Callable[[~V], ~V], collection: Union[MutableMapping[~K, Union[ForwardRef('MutableCollection'), ~V]], MutableSequence[Union[ForwardRef('MutableCollection'), ~V]]]) -> Union[MutableMapping[~K, Union[ForwardRef('MutableCollection'), ~V]], MutableSequence[Union[ForwardRef('MutableCollection'), ~V]]]"}],file:"/Users/iddan/fptools/fptools/collection.py"},{type:"module",name:"fptools.iterable",doc:null,is_pkg:!1,members:[{type:"function",name:"chunk",doc:"Creates an iterable of elements split into groups the length of size.\nIf iterable can't be split evenly, the final chunk will be the remaining elements.",signature:"(size: int, iterable: Iterable[~T]) -> Iterable[Tuple[~T, ...]]"},{type:"function",name:"chunk_by",doc:null,signature:"(predicate: Callable[[~T, int], ~Identity], iterable: Iterable[~T]) -> Iterable[Tuple[~T, ...]]"},{type:"function",name:"compact",doc:"Creates an iterable with all falsey values removed.",signature:"(iterable: Iterable[~T]) -> Iterable[~T]"},{type:"function",name:"find",doc:"Iterates over elements of iterable, returning the first element predicate returns truthy for.\nDefaults to None.",signature:"(comparator: Callable[[~T], bool], iterable: Iterable[~T]) -> Union[~T, NoneType]"},{type:"function",name:"find_index",doc:"This method is like find() except that it returns the index of the first element predicate returns truthy for\ninstead of the element itself.",signature:"(comparator: Callable[[~T], bool], iterable: Iterable[~T]) -> Union[int, NoneType]"},{type:"function",name:"flatten",doc:"Flattens iterable a single level deep.",signature:"(iterable: Iterable[Union[~T, Iterable[~T]]]) -> Iterable[~T]"},{type:"function",name:"group_by",doc:"Creates an iterable composed of keys generated from the results of running each element of iterable thru iteratee.\nThe order of grouped values is determined by the order they occur in iterable. The corresponding value of each key\nis a list of elements responsible for generating the key. The iteratee is invoked with one argument: (value).",signature:"(predicate: Callable[[~T], ~G], iterable: Iterable[~T]) -> Dict[~G, List[~T]]"},{type:"function",name:"head",doc:"Gets the first element of iterable.\nDefaults to None.",signature:"(iterable: Iterable[~T]) -> ~T"},{type:"function",name:"intersection",doc:"Creates an iterable of unique values that are included in given source and target iterables using hash() for\ncomparisons. The order and references of result values are determined by the first iterable.",signature:"(source: Iterable[~HashableItem], target: Iterable[~HashableItem]) -> Iterable[~HashableItem]"},{type:"function",name:"key_by",doc:"Creates a dictionary composed of keys generated from the results of running each element of iterable thru iteratee.\nThe corresponding value of each key is the last element responsible for generating the key. The iteratee is invoked\nwith one argument: (value).",signature:"(iteratee: Callable[[~T], ~G], iterable: Iterable[~T]) -> Dict[~G, ~T]"},{type:"function",name:"mean",doc:"Computes the mean of the values in iterable.",signature:"(iterable: Iterable[~T]) -> ~T"},{type:"function",name:"uniq",doc:"Returns a duplicate-free version of an iterable, using hash for equality\ncomparisons, in which only the first occurrence of each element is kept.\nThe order of result values is determined by the order they occur in the\niterable.",signature:"(iterable: Iterable[~T]) -> Iterable[~T]"},{type:"function",name:"uniq_by",doc:"This function is like uniq except that it accepts iteratee which is invoked\nfor each element in array to generate the criterion by which uniqueness is\ncomputed. The order of result values is determined by the order they occur\nin the array. The iteratee is invoked with one argument: (value).",signature:"(key: Callable[[~T], Hashable], iterable: Iterable[~T]) -> Iterable[~T]"}],file:"/Users/iddan/fptools/fptools/iterable.py"},{type:"module",name:"fptools.mapping",doc:null,is_pkg:!1,members:[{type:"function",name:"create_empty",doc:"Create a new mapping of the type of given mapping",signature:"(mapping: MutableMapping[~K, ~V]) -> MutableMapping[~K, ~V]"},{type:"function",name:"extract",doc:null,signature:"(*keys: ~K, **aliases: ~K2)"},{type:"function",name:"is_dict",doc:"Matches if value is a dictionary",signature:"(value)"},{type:"class",name:"items",doc:"Mapping.items() for Mapping like objects that don't implement items()",members:[{type:"object",name:"__annotations__",doc:null},{type:"object",name:"__contains__",doc:null},{type:"object",name:"__dict__",doc:null},{type:"object",name:"__doc__",doc:null},{type:"object",name:"__init__",doc:null},{type:"object",name:"__init_subclass__",doc:null},{type:"object",name:"__iter__",doc:null},{type:"object",name:"__len__",doc:null},{type:"object",name:"__module__",doc:null},{type:"object",name:"__subclasshook__",doc:null},{type:"object",name:"__weakref__",doc:null},{type:"object",name:"_abc_impl",doc:null},{type:"object",name:"_from_iterable",doc:null}]},{type:"function",name:"map_keys",doc:"Creates a dictionary with the same values as _dict and keys generated by applying modifier(key) for each key.",signature:"(modifier: Callable[[~K], ~K2], mapping: MutableMapping[~K, ~V]) -> MutableMapping[~K2, ~V]"},{type:"function",name:"map_values",doc:"Creates a dictionary with the same keys as _dict and values generated by applying modifier(val) for each value.",signature:"(modifier: Callable[[~V], ~V2], mapping: MutableMapping[~K, ~V]) -> MutableMapping[~K, ~V2]"},{type:"function",name:"omit",doc:"Creates a mapping without the omitted mapping items.",signature:"(_items: Iterable[Hashable], mapping: MutableMapping[~K, ~V]) -> MutableMapping[~K, ~V]"},{type:"function",name:"pick",doc:"Creates a mapping composed of the picked mapping items.",signature:"(_items: Iterable[Hashable], mapping: MutableMapping[~K, ~V]) -> MutableMapping[~K, ~V]"}],file:"/Users/iddan/fptools/fptools/mapping.py"},{type:"module",name:"fptools.sequence",doc:null,is_pkg:!1,members:[{type:"function",name:"create_empty",doc:"Create a new sequence of the type of given sequence",signature:"(sequence: MutableSequence[~T]) -> MutableSequence[~T]"},{type:"function",name:"initial",doc:"Gets all but the last element of sequence.",signature:"(sequence: Sequence[~T]) -> ~T"},{type:"function",name:"last",doc:"Gets the last element of sequence.",signature:"(sequence: Sequence[~T]) -> ~T"},{type:"function",name:"omit",doc:"The opposite of pick; this method creates a sequence composed of the items that are not omitted.",signature:"(items: Iterable[int], sequence: MutableSequence[~T]) -> MutableSequence[~T]"},{type:"function",name:"pick",doc:"Creates a sequence composed of the picked sequence items.",signature:"(items: Iterable[int], sequence: MutableSequence[~T]) -> MutableSequence[~T]"}],file:"/Users/iddan/fptools/fptools/sequence.py"}],file:"/Users/iddan/fptools/fptools/__init__.py"}},11:function(e,n,t){e.exports=t(19)},17:function(e,n,t){},18:function(e,n,t){},19:function(e,n,t){"use strict";t.r(n);var a=t(0),o=t.n(a),i=t(3),l=t.n(i),r=(t(17),t(4)),c=t(5),u=t(8),s=t(6),p=t(9),m=t(7),d=t(10),b=t(1),f=(t(18),function e(n){var t=n.module,a=n.members,i=n.filter;return o.a.createElement("ul",null,a.map(function(n){if(i&&!n.members&&!n.name.includes(i))return null;var a=i&&n.name.includes(i)?n.name.split(i).map(function(e,n,t){return n<t.length-1?[e,o.a.createElement("b",{key:n},i)]:e}):n.name,l=n.members?"h5":"span";return o.a.createElement("li",{key:n.name},o.a.createElement(l,null,o.a.createElement("a",{href:"#"+y(Object(d.a)({},n,{module:t}))},a)),n.members&&o.a.createElement(e,{module:n.name,members:n.members,filter:n.name.includes(i)?"":i}))}))}),h=function(e){var n=e.docs,t=Object(a.useState)(""),i=Object(m.a)(t,2),l=i[0],r=i[1];return o.a.createElement("nav",null,o.a.createElement("h3",null,n.name),o.a.createElement("input",{type:"search",value:l,onChange:function(e){return r(e.target.value)}}),o.a.createElement(f,{members:n.members,filter:l}))},y=function(e){var n=e.name,t=e.module,a=e.type;return"module"===a?n:t+"."+n+("function"===a?"()":"")},g=function e(n){var t=n.module,a=n.name,i=n.type,l=n.doc,r=n.signature,c=(n.is_pkg,n.members),u=y({name:a,module:t,type:i});return o.a.createElement("div",{className:"item "+i},o.a.createElement("a",{id:u,href:"#"+u},"module"===i?o.a.createElement("h4",null,a):o.a.createElement("pre",null,r?o.a.createElement(o.a.Fragment,null,t&&t+".",o.a.createElement("b",null,a),r):o.a.createElement(o.a.Fragment,null,t&&t+".",o.a.createElement("b",null,a)))),l&&o.a.createElement("p",null,l),c&&c.map(function(n){return o.a.createElement(e,Object.assign({key:n.name,module:a},n))}))},_=function(e){function n(){return Object(r.a)(this,n),Object(u.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(p.a)(n,e),Object(c.a)(n,[{key:"render",value:function(){return o.a.createElement("div",{className:"App"},o.a.createElement(h,{docs:b}),o.a.createElement("main",null,b.members.map(function(e){return o.a.createElement(g,Object.assign({key:e.name},e))})))}}]),n}(a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(o.a.createElement(_,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[11,1,2]]]);
//# sourceMappingURL=main.0f3afedd.chunk.js.map