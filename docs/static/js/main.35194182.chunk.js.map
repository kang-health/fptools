{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NavigationMenu","_ref","module","members","filter","react_default","a","createElement","map","doc","name","includes","nameNode","split","part","i","array","length","key","Tag","href","getFullName","Object","objectSpread","Navigation","_ref2","docs","_useState","useState","_useState2","slicedToArray","query","setQuery","type","value","onChange","e","target","App_NavigationMenu","_ref3","Doc","_ref4","signature","is_pkg","fullName","className","id","Fragment","member","assign","App","App_Navigation","App_Doc","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yijBAIMA,SAAiB,SAAjBA,EAAiBC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,QAASC,EAApBH,EAAoBG,OAApB,OACrBC,EAAAC,EAAAC,cAAA,UACGJ,EAAQK,IAAI,SAAAC,GACX,GAAIL,IAAWK,EAAIN,UAAYM,EAAIC,KAAKC,SAASP,GAC/C,OAAO,KAET,IAAMQ,EACHR,GAAWK,EAAIC,KAAKC,SAASP,GAE1BK,EAAIC,KAAKG,MAAMT,GAAQI,IAAI,SAACM,EAAMC,EAAGC,GACnC,OAAID,EAAIC,EAAMC,OAAS,EACd,CAACH,EAAMT,EAAAC,EAAAC,cAAA,KAAGW,IAAKH,GAAIX,IAErBU,IALTL,EAAIC,KAOJS,EAAMV,EAAIN,QAAU,KAAO,OACjC,OACEE,EAAAC,EAAAC,cAAA,MAAIW,IAAKT,EAAIC,MACXL,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAAA,KAAGa,KAAM,IAAMC,EAAYC,OAAAC,EAAA,EAAAD,CAAA,GAAKb,EAAN,CAAWP,aAAYU,IAElDH,EAAIN,SACHE,EAAAC,EAAAC,cAACP,EAAD,CACEE,OAAQO,EAAIC,KACZP,QAASM,EAAIN,QACbC,OAAQK,EAAIC,KAAKC,SAASP,GAAU,GAAKA,UASjDoB,EAAa,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAAWC,EACLC,mBAAS,IADJC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAK,EAAA,GACxBI,EADwBF,EAAA,GACjBG,EADiBH,EAAA,GAE/B,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKmB,EAAKhB,MACVL,EAAAC,EAAAC,cAAA,SACE0B,KAAK,SACLC,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAASI,EAAEC,OAAOH,UAEnC7B,EAAAC,EAAAC,cAAC+B,EAAD,CAAgBnC,QAASuB,EAAKvB,QAASC,OAAQ2B,MAK/CV,EAAc,SAAAkB,GAAA,IAAG7B,EAAH6B,EAAG7B,KAAMR,EAATqC,EAASrC,OAAQ+B,EAAjBM,EAAiBN,KAAjB,MACT,WAATA,EACIvB,EACAR,EAAS,IAAMQ,GAAiB,aAATuB,EAAsB,KAAO,KAEpDO,EAAM,SAANA,EAAMC,GAA6D,IAA1DvC,EAA0DuC,EAA1DvC,OAAQQ,EAAkD+B,EAAlD/B,KAAMuB,EAA4CQ,EAA5CR,KAAMxB,EAAsCgC,EAAtChC,IAAKiC,EAAiCD,EAAjCC,UAAmBvC,GAAcsC,EAAtBE,OAAsBF,EAAdtC,SACnDyC,EAAWvB,EAAY,CAAEX,OAAMR,SAAQ+B,SAC7C,OACE5B,EAAAC,EAAAC,cAAA,OAAKsC,UAAW,QAAUZ,GACxB5B,EAAAC,EAAAC,cAAA,KAAGuC,GAAIF,EAAUxB,KAAM,IAAMwB,GACjB,WAATX,EACC5B,EAAAC,EAAAC,cAAA,UAAKG,GAELL,EAAAC,EAAAC,cAAA,WACGmC,EACCrC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACG7C,GAAUA,EAAS,IACpBG,EAAAC,EAAAC,cAAA,SAAIG,GACHgC,GAGHrC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACG7C,GAAUA,EAAS,IACpBG,EAAAC,EAAAC,cAAA,SAAIG,MAMbD,GAAOJ,EAAAC,EAAAC,cAAA,SAAIE,GACXN,GACCA,EAAQK,IAAI,SAAAwC,GAAM,OAChB3C,EAAAC,EAAAC,cAACiC,EAADlB,OAAA2B,OAAA,CAAK/B,IAAK8B,EAAOtC,KAAMR,OAAQQ,GAAUsC,QAqBpCE,mLAbX,OACE7C,EAAAC,EAAAC,cAAA,OAAKsC,UAAU,OACbxC,EAAAC,EAAAC,cAAC4C,EAAD,CAAYzB,KAAMA,IAClBrB,EAAAC,EAAAC,cAAA,YACGmB,EAAKvB,QAAQK,IAAI,SAAAC,GAAG,OACnBJ,EAAAC,EAAAC,cAAC6C,EAAD9B,OAAA2B,OAAA,CAAK/B,IAAKT,EAAIC,MAAUD,eAPlB4C,aC/EEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.35194182.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\nimport docs from \"./docs.json\";\nimport \"./App.css\";\n\nconst NavigationMenu = ({ module, members, filter }) => (\n  <ul>\n    {members.map(doc => {\n      if (filter && !doc.members && !doc.name.includes(filter)) {\n        return null;\n      }\n      const nameNode =\n        !filter || !doc.name.includes(filter)\n          ? doc.name\n          : doc.name.split(filter).map((part, i, array) => {\n              if (i < array.length - 1) {\n                return [part, <b key={i}>{filter}</b>];\n              }\n              return part;\n            });\n      const Tag = doc.members ? \"h5\" : \"span\";\n      return (\n        <li key={doc.name}>\n          <Tag>\n            <a href={\"#\" + getFullName({ ...doc, module })}>{nameNode}</a>\n          </Tag>\n          {doc.members && (\n            <NavigationMenu\n              module={doc.name}\n              members={doc.members}\n              filter={doc.name.includes(filter) ? '' : filter}\n            />\n          )}\n        </li>\n      );\n    })}\n  </ul>\n);\n\nconst Navigation = ({ docs }) => {\n  const [query, setQuery] = useState(\"\");\n  return (\n    <nav>\n      <h3>{docs.name}</h3>\n      <input\n        type=\"search\"\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n      />\n      <NavigationMenu members={docs.members} filter={query} />\n    </nav>\n  );\n};\n\nconst getFullName = ({ name, module, type }) =>\n  type === \"module\"\n    ? name\n    : module + \".\" + name + (type === \"function\" ? \"()\" : \"\");\n\nconst Doc = ({ module, name, type, doc, signature, is_pkg, members }) => {\n  const fullName = getFullName({ name, module, type });\n  return (\n    <div className={\"item \" + type}>\n      <a id={fullName} href={\"#\" + fullName}>\n        {type === \"module\" ? (\n          <h4>{name}</h4>\n        ) : (\n          <pre>\n            {signature ? (\n              <>\n                {module && module + \".\"}\n                <b>{name}</b>\n                {signature}\n              </>\n            ) : (\n              <>\n                {module && module + \".\"}\n                <b>{name}</b>\n              </>\n            )}\n          </pre>\n        )}\n      </a>\n      {doc && <p>{doc}</p>}\n      {members &&\n        members.map(member => (\n          <Doc key={member.name} module={name} {...member} />\n        ))}\n    </div>\n  );\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation docs={docs} />\n        <main>\n          {docs.members.map(doc => (\n            <Doc key={doc.name} {...doc} />\n          ))}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}