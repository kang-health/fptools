{"version":3,"sources":["util.js","navigation.js","App.js","serviceWorker.js","index.js"],"names":["getFullName","name","module","type","getLink","fullName","NavigationMenuItem","doc","filter","href","active","window","location","hash","includes","nameNode","split","map","part","i","array","length","key","Tag","members","className","NavigationMenu","Navigation","docs","useState","query","setQuery","handleChange","useCallback","event","target","value","onChange","autoFocus","Doc","signature","id","member","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w3gBAAaA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,KAAjB,MAChB,WAATA,EACIF,EACAC,EAAS,IAAMD,GAAiB,aAATE,EAAsB,KAAO,KAE7CC,EAAU,SAAAC,GAAQ,MAAI,IAAMA,GCFnCC,EAAqB,SAAC,GAA6B,IAA3BJ,EAA0B,EAA1BA,OAAQK,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACnCH,EAAWL,EAAY,eAAKO,EAAN,CAAWL,YACjCO,EAAOL,EAAQC,GACfK,EAASC,OAAOC,SAASC,OAASJ,EACxC,GAAID,GAAuB,WAAbD,EAAIJ,OAAsBI,EAAIN,KAAKa,SAASN,GACxD,OAAO,KAGT,IAAMO,EACHP,GAAWD,EAAIN,KAAKa,SAASN,GAE1BD,EAAIN,KAAKe,MAAMR,GAAQS,KAAI,SAACC,EAAMC,EAAGC,GACnC,OAAID,EAAIC,EAAMC,OAAS,EACd,CAACH,EAAM,uBAAGI,IAAKH,GAAIX,IAErBU,KALTX,EAAIN,KAQJsB,EAAMhB,EAAIiB,QAAU,KAAO,OAEjC,OACE,4BACE,kBAACD,EAAD,CAAKE,UAAWf,EAAS,SAAW,IAClC,uBAAGD,KAAMA,GAAOM,IAEjBR,EAAIiB,SACH,kBAAC,EAAD,CACEtB,OAAQK,EAAIN,KACZuB,QAASjB,EAAIiB,QACbhB,OAAQD,EAAIN,KAAKa,SAASN,GAAU,GAAKA,MAO7CkB,EAAiB,SAAC,GAAD,IAAGxB,EAAH,EAAGA,OAAQsB,EAAX,EAAWA,QAAShB,EAApB,EAAoBA,OAApB,OACrB,4BACGgB,EAAQP,KAAI,SAAAV,GACX,OACE,kBAAC,EAAD,CACEe,IAAKf,EAAIN,KACTC,OAAQA,EACRK,IAAKA,EACLC,OAAQA,SA6BHmB,EAtBI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAEzBC,EAAeC,uBACnB,SAAAC,GACEH,EAASG,EAAMC,OAAOC,SAExB,CAACL,IAEH,OACE,6BACE,4BAAKH,EAAK3B,MACV,2BACEE,KAAK,SACLiC,MAAON,EACPO,SAAUL,EACVM,UAAoC,KAAzB3B,OAAOC,SAASC,OAE7B,kBAAC,EAAD,CAAgBW,QAASI,EAAKJ,QAAShB,OAAQsB,MCjE/CS,G,MAAM,SAANA,EAAO,GAAqD,IAAnDrC,EAAkD,EAAlDA,OAAQD,EAA0C,EAA1CA,KAAME,EAAoC,EAApCA,KAAMI,EAA8B,EAA9BA,IAAKiC,EAAyB,EAAzBA,UAAWhB,EAAc,EAAdA,QAC3CnB,EAAWL,EAAY,CAAEC,OAAMC,SAAQC,SAC7C,OACE,yBAAKsB,UAAW,QAAUtB,GACxB,uBAAGsC,GAAIpC,EAAUI,KAAML,EAAQC,IACnB,WAATF,EACC,4BAAKF,GAEL,6BACGuC,EACC,oCACGtC,GAAUA,EAAS,IACpB,2BAAID,GACHuC,GAGH,oCACGtC,GAAUA,EAAS,IACpB,2BAAID,MAMbM,GAAO,2BAAIA,GACXiB,GACCA,EAAQP,KAAI,SAAAyB,GAAM,OAChB,kBAACH,EAAD,eAAKjB,IAAKoB,EAAOzC,KAAMC,OAAQD,GAAUyC,UAiBpCC,EAXH,kBACV,yBAAKlB,UAAU,OACb,kBAAC,EAAD,CAAYG,KAAMA,IAClB,8BACGA,EAAKJ,QAAQP,KAAI,SAAAV,GAAG,OACnB,kBAAC,EAAD,eAAKe,IAAKf,EAAIN,MAAUM,UChCZqC,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.07aeac04.chunk.js","sourcesContent":["export const getFullName = ({ name, module, type }) =>\n  type === \"module\"\n    ? name\n    : module + \".\" + name + (type === \"function\" ? \"()\" : \"\");\n\nexport const getLink = fullName => \"#\" + fullName;\n","import React, { useState, useCallback } from \"react\";\nimport { getFullName, getLink } from \"./util\";\n\nconst NavigationMenuItem = ({ module, doc, filter }) => {\n  const fullName = getFullName({ ...doc, module });\n  const href = getLink(fullName);\n  const active = window.location.hash === href;\n  if (filter && doc.type !== \"module\" && !doc.name.includes(filter)) {\n    return null;\n  }\n\n  const nameNode =\n    !filter || !doc.name.includes(filter)\n      ? doc.name\n      : doc.name.split(filter).map((part, i, array) => {\n          if (i < array.length - 1) {\n            return [part, <b key={i}>{filter}</b>];\n          }\n          return part;\n        });\n\n  const Tag = doc.members ? \"h5\" : \"span\";\n\n  return (\n    <li>\n      <Tag className={active ? \"active\" : \"\"}>\n        <a href={href}>{nameNode}</a>\n      </Tag>\n      {doc.members && (\n        <NavigationMenu\n          module={doc.name}\n          members={doc.members}\n          filter={doc.name.includes(filter) ? \"\" : filter}\n        />\n      )}\n    </li>\n  );\n};\n\nconst NavigationMenu = ({ module, members, filter }) => (\n  <ul>\n    {members.map(doc => {\n      return (\n        <NavigationMenuItem\n          key={doc.name}\n          module={module}\n          doc={doc}\n          filter={filter}\n        />\n      );\n    })}\n  </ul>\n);\n\nconst Navigation = ({ docs }) => {\n  const [query, setQuery] = useState(\"\");\n  const handleChange = useCallback(\n    event => {\n      setQuery(event.target.value);\n    },\n    [setQuery]\n  );\n  return (\n    <nav>\n      <h3>{docs.name}</h3>\n      <input\n        type=\"search\"\n        value={query}\n        onChange={handleChange}\n        autoFocus={window.location.hash === \"\"}\n      />\n      <NavigationMenu members={docs.members} filter={query} />\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport docs from \"./docs.json\";\nimport Navigation from \"./navigation\";\nimport { getFullName, getLink } from \"./util\";\nimport \"./App.css\";\n\nconst Doc = ({ module, name, type, doc, signature, members }) => {\n  const fullName = getFullName({ name, module, type });\n  return (\n    <div className={\"item \" + type}>\n      <a id={fullName} href={getLink(fullName)}>\n        {type === \"module\" ? (\n          <h4>{name}</h4>\n        ) : (\n          <pre>\n            {signature ? (\n              <>\n                {module && module + \".\"}\n                <b>{name}</b>\n                {signature}\n              </>\n            ) : (\n              <>\n                {module && module + \".\"}\n                <b>{name}</b>\n              </>\n            )}\n          </pre>\n        )}\n      </a>\n      {doc && <p>{doc}</p>}\n      {members &&\n        members.map(member => (\n          <Doc key={member.name} module={name} {...member} />\n        ))}\n    </div>\n  );\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <Navigation docs={docs} />\n    <main>\n      {docs.members.map(doc => (\n        <Doc key={doc.name} {...doc} />\n      ))}\n    </main>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}